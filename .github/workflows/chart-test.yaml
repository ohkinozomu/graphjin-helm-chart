name: Chart test
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  k8s-test:
    name: chart-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.1.0

      - name: Dry run
        run: |
          helm install --dry-run --debug graphjin ./charts/graphjin

      - name: Install PostgreSQL
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm install postgres bitnami/postgresql --set global.postgresql.postgresqlPassword="postgres"
          # TODO: ping PostgreSQL
          sleep 30
          kubectl get svc
          kubectl get pods
          export POSTGRES_PASSWORD=$(kubectl get secret --namespace default postgres-postgresql -o jsonpath="{.data.postgresql-password}" | base64 --decode)
          cat test/postgres.sql | kubectl run postgres-postgresql-client --rm -i --restart='Never' --namespace default --image docker.io/bitnami/postgresql:11.11.0-debian-10-r62 --env="PGPASSWORD=$POSTGRES_PASSWORD" --command -- psql --host postgres-postgresql -U postgres -d postgres -p 5432 -
        
      - name: Install graphjin
        run: |
          helm install graphjin ./charts/graphjin
          
      - name: Check running
        run: |
          # TODO: wait graphjin
          sleep 15
          export POD=`kubectl get pods -o name | grep graphjin`
          kubectl get pods
          kubectl describe pods
          kubectl logs $POD
          helm test graphjin

  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.0.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --target-branch main)
          if [[ -n "$changed" ]]; then
            echo "::set-output name=changed::true"
          fi

      - name: Run chart-testing (lint)
        run: ct lint --target-branch main --debug

      - name: Create kind cluster
        uses: helm/kind-action@v1.1.0
        if: steps.list-changed.outputs.changed == 'true'
